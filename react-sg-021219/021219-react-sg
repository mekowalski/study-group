-What is React?
  a. Single JS library

-What is its Purpose?
  a. Purpose is to show content(HTML: divs, span, headers, forms, etc) to users & handle user interaction

-What about React and Redux?
  a. React can work alone BUT it can also work with variety of other libraries/packages/servers/databases

-What is a React class?
  a. React components are made using either JS functions or classes(part of JS ES2015)

-What is a React component?
  a. Goal of the component is to create some amount of HTML, render that HTML & interact with user input
     -Function based: produces HTML to show user(via JSX) & handles input from user(via event handlers)
     -Functional: Good for simple content, without a lot of logic
     -Class based: handles state of the Component(data update/changes)
     -Class: Good for just about everything else, with complex logic, respond to user input, etc
     3 TENETS
     -Nesting: component can be shown inside of another
     -Reusability: make components that can be easily reused throughout app
     -configuration: arrange component when it is created

-What is a React PROPs?
    -React's Props system(hardcoded author, time and content)(react-props-system)
    eg: using props
    1. Parent provides info to Child
    <CommentDetail author='Malind' />
    CommentDetail:      Child Component
    author=:            PROPerty name
    'Malind':           Value of the PROP

    2. Child consuming info from Parent
    const CommentDetail = props => {
      console.log(props)
      return (
        //CODE
        <a href='/' className='author'>
          {props.author} //reference with {props.actualPropName}
        </a>
      )
    }
    3. Props for time and content

    l. component reuse and wrap component
    eg: create new comp and export & import
    const WrappedCard = () => {
      return (
        <div className='ui card'>
          <div className='content'></div>
          <div className='extra content'>
            <div className='ui two buttons'>
              <div className='ui basic green button'>Approve</div>
              <div className='ui basic red button'>Decline</div>
            </div>
          </div>
        </div>
      )
    }
    (show in App)
    const App = () => {
      return (
        div here
          <WrappedCard />
        div there
      )
    }

    m. custom content(actual CommentDetail comp)
    eg: show CommentDetail in WrappedCard
    const App = () => {
      return (
        div here
          <WrappedCard>
            <CommentDetail />
          </WrappedCard>
        div there
      )
    }
    (how to actually get the comp to display)
    const WrappedCard = props => {
      return (
        this div
          <div className='content'>{props.children}</div>
        that div
      )
    }


-What is an event handler?
  a. React is mainly used to handle user interaction.
     -An event handler is used to detect user interaction and respond to it(updates/re-render)
     -This is usually created in the component

-Two prominent, separate libraries?
  a. React is split into 2 separate libraries
     -REACT: knows what a component is and how to make components work together
     -Common for multiple components to be created and work together to form usable application
     -REACTDOM: knows how to take a component and make it show up in the DOM, as HTML

 -What is JSX?
  a. Looks like HTML and can be placed in JS code, it determines the content of the React app like normal
     HTML
     -Special dialect of JS
     -Your browser & no user's browser natively understands what JSX is
     -JSX gets converted to normal looking JS code
     -BabelJS homepage, JSX written for simplicity
     -JSX gets turned into a function call
     -Complicated code will look messy, unclear and become huge to maintain
     -Allow written function calls in an easy-to-understand format

     eg: Local environment - generate new React project
     1. Make sure NodeJS is installed/updated
     -check version: node -v => v11.2.0
     -installation: nodejs.org/en/download, pick installer OS, download, terminal & check it was installed
     -possibly need to restart terminal

     2. Install create-react-app(tool)
     -installation: npm install -g create-react-app(may take a few moments)
     -BREAKDOWN:
      npm install -g create-react-app
      npm:              Runs npm(node package manager)(open source JS package manager)
      install:          'install' a package onto my computer
      -g:               Installs this package globally to run it from the terminal
      create-react-app: Name of package wanting to install

     3. Generate a project
     -generate: create-react-app name-of-project-app(may take a few moments)
     -alternate: npx create-react-app name-of-project-app(newer version)(without running installation)
     -added 1K+ packages installed onto local machine
     -In new create-react-app there are a ton of dependencies to help write a React App
     (BTS: Webpack, Babel, Dev Server, why-create-react-app file)
     (Babel: convert current JS to be supported with browser, consists of tremendous # of packages)

     4. Build a project!!(play with JSX)
     -open editor and cd into correct project DIR
     -automatically generated with create-react-app
     -src: put all written source code heres
     -public: static files ie: images/icons/html file
     -node_modules: contains all project dependencies ie: 1K+ dependencies
     -package.json: records project dependencies & configures project
     -package-lock.json: records exact version of packages installed
     -README.md: project manual

     Running project
     -npm start: output scroll and new tab will open to localhost
     -npm start(2nd copy): either stop other server or run app on another port
     -on your network instead of localhost

Javascript Module Systems(JSX purpose)
-remove src default files
-create index.js/page refresh
-how to use React to get content on screen
-place around with JSX
-steps as guidance to get content to appear with React
1. import React and ReactDOM libraries
  import React from 'react';
  import ReactDOM from 'react-dom';
  -import React from 'react'
  -import:     Get code from other file or dependency
  -React:      Variable to assign what is being imported
  -from:       Specify the name of the library or file importing from(node_modules DIR)
  -'react':    Name of dependency OR path to the file being imported

  -import: References a module system of ES2015 modules, with a set of rules
  -require: References CommonJS modules with a different set of rules
  const React = require('react')

2. create React component
  a. -create new function component with ES6 =>()
  const App = () => {
    return <div>Hello learners!</div> (THIS IS JSX!!!)
  }

  b. -multi-line segment of JSX inside ()
  const App = () => {
    return (
      <div>
        <label className='label' htmlFor='name'>Enter Name: </label>
        <input id='name' type='text' />
        <button>Click Me!</button>
      </div> (THIS IS JSX!!!)
    )
  }

3. take React component and show it on screen
  -render App component
  -div id='root', create-react-app generated app, take component and render it inside div -id='root'
  ReactDOM.render(
    <App />, (JSX tags) (instance of App comp)
    document.querySelector('#root') (reference to DOM element existing in HTML file) (render it into this)
  )

JSX vs html
-Adding custom styling to an element uses different syntax
eg: inline styling
HTML: <div style='background-color: red;'></div>
JSX: <div style={{backgroundColor: 'red'}}></div>


-Adding a class to an element uses different syntax
*class is a reserved JS keyword*
eg: reserved keywords
HTML: <label class="label">Enter Name: </label>
JSX: <label className="label">Enter Name: </label>


-JSX can reference JS variables
*take JS variable and print it up in JSX block*
eg: important variable feature
const App = () => {
  const buttonText = 'Click Me'

  return (
    <button style={{ backgroundColor: 'green', color: 'white' }}>
      {buttonText}
    </button>
  )
}
