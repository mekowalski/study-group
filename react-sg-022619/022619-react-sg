-Last SG, a new React app was generated with the index.js file
-The index.js file held the App component which had repetitive hard-coded JSX
-Also created a separate component that was extracted from the repetitive JSX in the initial App component
-Rendered/Imported CommentDetail component within App component with export/import statements
-Installed and made use of Faker JS library and Semantic UI(open source styling framework)
-The majority of the classNames I'm using are all from Semantic UI, I've just used this a bit and am
 familiar with the specific tag naming of values

-Currently the CommentDetail Component has hard-coded attributes of: Author, Date, Content
-Not every comment will have the exact identical author, date and content
-When CommentDetail is shown on the screen, it probably should be customizable
-Props: is all about customization, allows configure how Component behaves or what the content shows


(Step 4, Second take: extract JSX to new Component)
(Create reusable, configurable component(config through props))
(Maybe talk about props in the next react sg?)
-What is a React PROPs?
-React's Props system(hardcoded author, time and content)(react-props-system)
a. System for passing data from a Parent component to a Child component, goal is to customize/configure a
   Child component
   A Child cannot pass data to the Parents through the Props system directly
   Props is use mainly for passing from Parent to Child

-Two stages for Props system
  1. Parent provides data/info to Child
  2. Child consumes, makes use of that data/info


eg: using props
1. Parent provides info to Child within Parent Component
-First instance of Component Nesting
-Every CommentDetail has the same Author, Date and Content
Parent: App component, Child: CommentDetail component
const App = () => {
  return (
    <div className='ui container comments'>
      <CommentDetail  author='Malind'/>
      <CommentDetail  author='Ryan'/>
      <CommentDetail  author='Kristopher'/>
    </div>
  )
}


2. Parent provides info to Child
<CommentDetail author='Malind' />
CommentDetail:      Child Component
author=:            PROPerty name
'Malind':           Value of the PROP
*Props value is a hard-coded string currently
*It could reference a JS variable with {} such as {author}
*Providing same Props name but each has a different value
*When a Prop is provided to a component, it's always going to a unique version of that component
*The Prop will not be shared with the other instances of the component


3. Child consuming info from Parent
const CommentDetail = (props) => {
  console.log(props)
  return (
    //CODE
    <a href='/' className='author'>
      {props.author} //reference with {props.actualPropName}
    </a>
  )
}
*CommentDetail component gets to the Prop
*Props is provided inside of an object as the first argument to the component function
*const CommentDetail = (props) => {}
*console.log(props), DevTools, 3 console.logs of 3 Objects, instances of CommentDetail component
*To consume the Prop, find of the Prop location in component, {} to reference JS variable, {props.author}
*Whenever CommentDetail is shown on screen, it'll look at the (props) object, see the author Property
*Take that author name and stick it into the tag


4. Props for date, content and avatar
<CommentDetail
  author='Malind'
  date='Today at 4:45pm'
  content='This was a good read'
  avatar={faker.image.avatar()}/>
<CommentDetail
  author='Ryan'
  date='Today at 9:36am'
  content='nicely written article'
  avatar={faker.image.avatar()}/>
<CommentDetail
  author='Kristopher'
  date='Yesterday at 11:03pm'
  content='tl, dr'
  avatar={faker.image.avatar()}/>
*Props object (props) will now have 2 key-value pairs of author, date, content and avatar

Date
{props.time}

Content
{props.content}

Avatar
{props.avatar}
*Customize the attribute on JSX element using a prop
*No hard-coded string provided for the avatar
*It will be a reference to a JS variable
*avatar={faker.image.avatar()} will generate a new link to an image and assign it to the avatar prop
*Reference {props.avatar} variable to src=


a. COMPONENT REUSE AND WRAP COMPONENT
-Create a brand new component called WrappedCard with approve/decline
-Most comments posted will have a reviewer who can accept or reject a comment
-Option to stick custom content in the component

-New file and Component for WrappedCard.js
-Import, functional component and export
-Borrow styling from Semantic UI Views/Card
-Will sub in custom conten in a moment
eg: create new comp and export & import
const WrappedCard = () => {
  return (
    <div className='ui card'>
      <div className='content'></div> //where the ultimate content will go(CommentDetail/Custom Message)
      <div className='extra content'>
        <div className='ui two buttons'>
          <div className='ui basic green button'>Approve</div>
          <div className='ui basic red button'>Decline</div>
        </div>
      </div>
    </div>
  )
}

export default WrappedCard


b. SHOW IN APP
import WrappedCard from './WrappedCard'
const App = () => {
  return (
    div here
      <WrappedCard />
    div there
  )
}


c. CUSTOM CONTENT(ACTUAL CommentDetail COMP)
-Show CommentDetail comp
-But don't always want WrappedCard to always show CommentDetail
-Want to make WrappedCard reusable with other text
-Feature in Props system, another way to communicate info to Child component
eg: show CommentDetail in WrappedCard
const App = () => {
  return (
    div here
      <WrappedCard>
        <CommentDetail /> //communicate the comp down to WrappedCard and show the CommentDetail
      </WrappedCard> //closing tag
    div there
  )
}
*CommentDetail comp is now passed as a Prop down to WrappedCard component
*CommentDetail is providing configuration to WrappedCard component


d. HOW TO ACTUALLY GET THE COMP TO DISPLAY
const WrappedCard = props => {
  return (
    this div
      <div className='content'>{props.children}</div>
    that div
  )
}
