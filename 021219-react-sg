-What is React?
  a. Single JS library

-What is its Purpose?
  a. Purpose is to show content(HTML: divs, span, headers, forms, etc) to users & handle user interaction

-What about React and Redux?
  a. React can work alone BUT it can also work with a variety of other libraries/packages/servers/databases

-What is a React class?
  a. React components are made using either JS functions or classes(part of JS ES2015)

-What is a React component?
  a. Goal of the component is to create some amount of HTML, render that HTML & interact with user input

-What is an event handler?
  a. React is mainly used to handle user interaction.
     -An event handler is used to detect user interaction and respond to it(updates/re-render)
     -This is usually created in the component

-Two prominent, separate libraries?
  a. React is split into 2 separate libraries
     -REACT: knows what a component is and how to make components work together
     -Common for multiple components to be created and work together to form usable application
     -REACTDOM: knows how to take a component and make it show up in the DOM, as HTML

 -What is JSX?
  a. Looks like HTML and can be placed in JS code, it determines the content of the React app like normal
     HTML
     -Special dialect of JS
     eg: Local environment - generate new React project
     1. Make sure NodeJS is installed/updated
     -check version: node -v => v11.2.0
     -installation: nodejs.org/en/download, pick installer OS, download, terminal & check it was installed
     -possibly need to restart terminal

     2. Install create-react-app(tool)
     -installation: npm install -g create-react-app(may take a few moments)
     -BREAKDOWN:
      npm install -g create-react-app
      npm:              Runs npm(node package manager)(open source JS package manager)
      install:          'install' a package onto my computer
      -g:               Installs this package globally to run it from the terminal
      create-react-app: Name of package wanting to install

     3. Generate a project
     -generate: create-react-app name-of-project-app(may take a few moments)
     -alternate: npx create-react-app name-of-project-app(newer version)(without running installation)
     -added 1K+ packages installed onto local machine
     -In new create-react-app there are a ton of dependencies to help write a React App
     (BTS: Webpack, Babel, Dev Server, why-create-react-app file)
     (Babel: convert current JS to be supported with browser, consists of tremendous # of packages)

     4. Build a project!!(play with JSX)
     -open editor and cd into correct project DIR
     -automatically generated with create-react-app
     -src: put all written source code heres
     -public: static files ie: images/icons/html file
     -node_modules: contains all project dependencies ie: 1K+ dependencies
     -package.json: redocrds project dependencies & configures project
     -package-lock.json: records exact version of packages installed
     -README.md: project manual

     Running project
     -npm start: output scroll and new tab will open to localhost
     -npm start(2nd copy): either stop other server or run app on another port
     -on your network instead of localhost

Javascript Module Systems(JSX purpose)
-remove src default files
-create index.js/page refresh
-how to use React to get content on screen
-place around with JSX
-steps as guidance to get content to appear with React
1. import React and ReactDOM libraries
  import React from 'react';
  import ReactDOM from 'react-dom';
  -import React from 'react'
  -import:     Get code from other file or dependency
  -React:      Variable to assign what is being imported
  -from:       Specify the name of the library or file importing from
  -'react':    Name of dependency OR path to the file being imported

  -import: References a module system of ES2015 modules, with a set of rules
  -require: References CommonJS modules with a different set of rules
  
2. create React component
3. take React component and show it on screen
